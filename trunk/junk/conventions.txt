Packages:

All python code should be in appropriate subpackage of 'morpher',
except the main script morpher.py

Naming:

Variables, functions and modules should use underscores to separate words and
be all lower case. Classes should have the first letter capitalized.

Comments:
Single line: # This is a comment
Multiple lines: # This is a comment that 
                # spans multiple lines
Note the space between the # and the first letter (which is capitalized)

Documentation:

We're using the epytext documentation generation tool. Markup is like:

def x_intercept(m, b):
    """
    Return the x intercept of the line M{y=m*x+b}.  The X{x intercept}
    of a line is the point at which it crosses the x axis (M{y=0}).

    This function can be used in conjuction with L{z_transform} to
    find an arbitrary function's zeros.

    @type  m: number
    @param m: The slope of the line.
    @type  b: number
    @param b: The y intercept of the line.  The X{y intercept} of a
              line is the point at which it crosses the y axis (M{x=0}).
    @rtype:   number
    @return:  the x intercept of the line M{y=m*x+b}.
    """
    return -b/m
    
Debugging:

import logging
log = logging.getLogger(__name__)

log.error("Can't open file %s", file)
log.debug("Opened file %s", file)
# Can only use in except blocks, adds exception info
log.exception("Caught an exception")
# Returns (filename, linenum, funcname) of caller
log.findCaller()

Levels are debug, info, warning, error, critical

Do NOT do this: log.critical("Can't open file %s" % file)
We want the log module to do the formatting (better performance when disabled)

Configuration options:

Whenever possible, store data related to state in the global object.
Two-part hierarchy mirrored by config.ini - (section, property)

import config
outputdir = config.cfg.get('output', 'outdir')
config.cfg.set('parser','modelfile', "myfile.xml")

